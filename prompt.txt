Build a React web app that allows users to specify a list of RSS feeds. The app should periodically check the RSS feeds, and send a ntfy notification to the user when a new item is found. The user should also be able to specify a list of keywords to filter the RSS feeds. The app should continue to run, even if the user closes the browser. It should be able to continue running checks for months without user intervention. Use Mantine for the UI; Use node-cron for scheduling. I cannot expose a separate port for the server. The server should be embedded in the React app.


Modify this React web application to allow users to specify a list of RSS feeds and keywords for filtering.

**Application Structure:**
The application should include an embedded Node.js server running within the same process as the React app. The server will not expose a separate port. The React app will be served from this server. We will need a bundler to compile React code and bundle the server code into single deployable unit. Use Mantine for the user interface components. It is not acceptable to use Electron or similar frameworks. The goal of this exercise is to have a proof of concept using create-react-app and a single node.js server and not to have an industrial strength, highly performant, server.

**Functionality:**
1.  **User Interface (Mantine):**
    *   Provide a form to add/remove RSS feed URLs.
    *   Provide a form to add/remove keywords for each RSS feed.
    *   Display the status of the feed checking process.
2.  **Embedded Server:**
    *   The server should use `node-cron` to periodically check the RSS feeds.
    *   Store the user's RSS feed list, keywords, and other settings in a JSON file (e.g., `config.json`) located in a persistent location within the application directory.
    *   The server should load this configuration at startup and save changes whenever the user updates settings.
    *  When a new item is found that matches the keywords, the server must send a POST request to a configured ntfy topic, with the new item's details, this topic should be part of the configuration file.
    *   Include robust error handling for network requests (e.g., RSS fetching, ntfy calls), parsing errors, and file system access. Implement logging using a suitable mechanism (e.g., `console.log` for simplicity, or a proper logging library for more complex scenarios).
3.  **API:**
    *   Expose a simple API from the server (e.g., via HTTP endpoints) so that the React app can:
        *   Fetch the current configuration.
        *   Update the configuration (feeds, keywords, etc.).
        *   Get the status of the feed checking process

**Persistence & Background Process:**
The application should continue to run background feed checks, even if the user closes the browser window. The server should be able to run for extended periods (months) without user intervention, relying on the persisted configuration.